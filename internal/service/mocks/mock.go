// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	domain "github.com/Woodfyn/Web-api/internal/domain"
	core "github.com/Woodfyn/auditLog/pkg/core"
	gomock "github.com/golang/mock/gomock"
)

// MockGames is a mock of Games interface.
type MockGames struct {
	ctrl     *gomock.Controller
	recorder *MockGamesMockRecorder
}

// MockGamesMockRecorder is the mock recorder for MockGames.
type MockGamesMockRecorder struct {
	mock *MockGames
}

// NewMockGames creates a new mock instance.
func NewMockGames(ctrl *gomock.Controller) *MockGames {
	mock := &MockGames{ctrl: ctrl}
	mock.recorder = &MockGamesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGames) EXPECT() *MockGamesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGames) Create(game domain.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGamesMockRecorder) Create(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGames)(nil).Create), game)
}

// Delete mocks base method.
func (m *MockGames) Delete(gameId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", gameId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGamesMockRecorder) Delete(gameId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGames)(nil).Delete), gameId)
}

// GetAll mocks base method.
func (m *MockGames) GetAll() ([]domain.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGamesMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGames)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockGames) GetById(gameId int) (domain.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", gameId)
	ret0, _ := ret[0].(domain.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockGamesMockRecorder) GetById(gameId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockGames)(nil).GetById), gameId)
}

// Update mocks base method.
func (m *MockGames) Update(gameId int, input domain.UpdateGameInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", gameId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGamesMockRecorder) Update(gameId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGames)(nil).Update), gameId, input)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// LogOut mocks base method.
func (m *MockUsers) LogOut(refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockUsersMockRecorder) LogOut(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockUsers)(nil).LogOut), refreshToken)
}

// ParseToken mocks base method.
func (m *MockUsers) ParseToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUsersMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUsers)(nil).ParseToken), token)
}

// RefreshTokens mocks base method.
func (m *MockUsers) RefreshTokens(refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockUsersMockRecorder) RefreshTokens(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockUsers)(nil).RefreshTokens), refreshToken)
}

// SignIn mocks base method.
func (m *MockUsers) SignIn(inp domain.SignInInput) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", inp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUsersMockRecorder) SignIn(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUsers)(nil).SignIn), inp)
}

// SignUp mocks base method.
func (m *MockUsers) SignUp(user domain.SignUpInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUsersMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsers)(nil).SignUp), user)
}

// MockAuditClient is a mock of AuditClient interface.
type MockAuditClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuditClientMockRecorder
}

// MockAuditClientMockRecorder is the mock recorder for MockAuditClient.
type MockAuditClientMockRecorder struct {
	mock *MockAuditClient
}

// NewMockAuditClient creates a new mock instance.
func NewMockAuditClient(ctrl *gomock.Controller) *MockAuditClient {
	mock := &MockAuditClient{ctrl: ctrl}
	mock.recorder = &MockAuditClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditClient) EXPECT() *MockAuditClientMockRecorder {
	return m.recorder
}

// SendLogRequest mocks base method.
func (m *MockAuditClient) SendLogRequest(ctx context.Context, req core.LogItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLogRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendLogRequest indicates an expected call of SendLogRequest.
func (mr *MockAuditClientMockRecorder) SendLogRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLogRequest", reflect.TypeOf((*MockAuditClient)(nil).SendLogRequest), ctx, req)
}
